// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	reflect "reflect"

	domain "github.com/aAmer0neee/comments-service-test-task/internal/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ArticleRecordsCount mocks base method.
func (m *MockRepository) ArticleRecordsCount(article domain.Article) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArticleRecordsCount", article)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ArticleRecordsCount indicates an expected call of ArticleRecordsCount.
func (mr *MockRepositoryMockRecorder) ArticleRecordsCount(article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArticleRecordsCount", reflect.TypeOf((*MockRepository)(nil).ArticleRecordsCount), article)
}

// CommentsRecordCount mocks base method.
func (m *MockRepository) CommentsRecordCount(comment domain.Comment) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommentsRecordCount", comment)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommentsRecordCount indicates an expected call of CommentsRecordCount.
func (mr *MockRepositoryMockRecorder) CommentsRecordCount(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommentsRecordCount", reflect.TypeOf((*MockRepository)(nil).CommentsRecordCount), comment)
}

// CreateArticle mocks base method.
func (m *MockRepository) CreateArticle(article domain.Article) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateArticle", article)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateArticle indicates an expected call of CreateArticle.
func (mr *MockRepositoryMockRecorder) CreateArticle(article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateArticle", reflect.TypeOf((*MockRepository)(nil).CreateArticle), article)
}

// CreateComment mocks base method.
func (m *MockRepository) CreateComment(comment domain.Comment) (domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", comment)
	ret0, _ := ret[0].(domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockRepositoryMockRecorder) CreateComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockRepository)(nil).CreateComment), comment)
}

// GetArticle mocks base method.
func (m *MockRepository) GetArticle(id uuid.UUID) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", id)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticle indicates an expected call of GetArticle.
func (mr *MockRepositoryMockRecorder) GetArticle(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockRepository)(nil).GetArticle), id)
}

// GetComments mocks base method.
func (m *MockRepository) GetComments(articleId uuid.UUID, page, limit int) ([]domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", articleId, page, limit)
	ret0, _ := ret[0].([]domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockRepositoryMockRecorder) GetComments(articleId, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockRepository)(nil).GetComments), articleId, page, limit)
}

// GetListArticles mocks base method.
func (m *MockRepository) GetListArticles(page, limit int) ([]domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListArticles", page, limit)
	ret0, _ := ret[0].([]domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListArticles indicates an expected call of GetListArticles.
func (mr *MockRepositoryMockRecorder) GetListArticles(page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListArticles", reflect.TypeOf((*MockRepository)(nil).GetListArticles), page, limit)
}
