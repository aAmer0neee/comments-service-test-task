// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service_mock is a generated GoMock package.
package service_mock

import (
	reflect "reflect"

	domain "github.com/aAmer0neee/comments-service-test-task/internal/domain"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetArticle mocks base method.
func (m *MockService) GetArticle(id uuid.UUID, commentPage, pageLimit int32) (domain.Article, []domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticle", id, commentPage, pageLimit)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].([]domain.Comment)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetArticle indicates an expected call of GetArticle.
func (mr *MockServiceMockRecorder) GetArticle(id, commentPage, pageLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticle", reflect.TypeOf((*MockService)(nil).GetArticle), id, commentPage, pageLimit)
}

// GetArticlesList mocks base method.
func (m *MockService) GetArticlesList(page, limit int32) ([]domain.Article, int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticlesList", page, limit)
	ret0, _ := ret[0].([]domain.Article)
	ret1, _ := ret[1].(int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetArticlesList indicates an expected call of GetArticlesList.
func (mr *MockServiceMockRecorder) GetArticlesList(page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticlesList", reflect.TypeOf((*MockService)(nil).GetArticlesList), page, limit)
}

// PostArticle mocks base method.
func (m *MockService) PostArticle(article domain.Article) (domain.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostArticle", article)
	ret0, _ := ret[0].(domain.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostArticle indicates an expected call of PostArticle.
func (mr *MockServiceMockRecorder) PostArticle(article interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostArticle", reflect.TypeOf((*MockService)(nil).PostArticle), article)
}

// PostComment mocks base method.
func (m *MockService) PostComment(comment domain.Comment) (domain.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostComment", comment)
	ret0, _ := ret[0].(domain.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostComment indicates an expected call of PostComment.
func (mr *MockServiceMockRecorder) PostComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostComment", reflect.TypeOf((*MockService)(nil).PostComment), comment)
}
